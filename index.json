[{"categories":null,"content":"简介 常用的地图可视化的编程工具有 MATLAB、IDL、GrADS、GMT、NCL 等。而python环境下常用的地图包有Basemap、Cartopy。此前 Python 最常用的地图包是 Basemap，然而它将于 2020 年被弃用，官方推荐使用 Cartopy 包作为替代。Cartopy 是英国气象局开发的地图绘图包，实现了 Basemap 的大部分功能，还可以通过 Matplotlib 的 API 实现丰富的自定义效果。 Cartopy 是利用 Matplotlib 来画图的，因此首先要导入 pyplot 模块。在 Cartopy 中，每种投影都是一个类，被存放在 cartopy.crs 模块中，crs 即坐标参考系统（Coordinate Reference Systems）之意。所以接着要导入这个模块。这里选取最常用的等距圆柱投影 ccrs.PlateCarree 作为地图投影。 Matplotlib 画图是通过调用 Axes 类的方法来完成的。Cartopy 创造了一个 Axes 的子类，GeoAxes，它继承了前者的基本功能，还添加了一系列绘制地图元素的方法。创建一个 GeoAxes 对象的办法是，在创建 axes（或 subplot）时，通过参数 projection 指定一个 ccrs 中的投影。 因此用 Cartopy 画地图的基本流程并不复杂： 创建画布。 通过指定 projection 参数，创建 GeoAxes 对象。 调用 GeoAxes 的方法画图。 安装Cartopy和相关的库 conda install -c conda-forge cartopy 投影方式及设置 Cartopy提供了大量的投影方式，使用cartopy.crs可以调用各个投影。 cartopy.crs.LambertCylindrical #调用兰勃脱投影 cartopy.crs.Mercator #调用麦卡托投影 GeoAxes的一些有用的方法 GeoAxes 有不少有用的方法，这里列举如下： set_global：让地图的显示范围扩展至投影的最大范围。例如，对 PlateCarree 投影的 ax 使用后，地图会变成全球的。 set_extent：给出元组 (x0, x1, y0, y1) 以限制地图的显示范围。 set_xticks：设置 x 轴的刻度。 set_yticks：设置 y 轴的刻度。 gridlines：给地图添加网格线。 coastlines：在地图上绘制海岸线。 stock_img：给地图添加低分辨率的地形图背景。 add_feature：给地图添加特征（例如陆地或海洋的填充、河流等）。 在地图上添加数据 在直接调用 ax.plot、ax.contourf 等方法在地图上添加数据之前，需要了解 Cartopy 的一个核心概念：在创建一个 GeoAxes 对象时，通过 projection 关键字指定了这个地图所处的投影坐标系，这个坐标系的投影方式和原点位置都可以被指定。但是我们手上的数据很可能并不是定义在这个坐标系下的（例如那些规整的经纬度网格数据），因此在调用画图方法往地图上添加数据时，需要通过 transform 关键字指定我们的数据所处的坐标系。画图过程中，Cartopy 会自动进行这两个坐标系之间的换算，把我们的数据正确投影到地图的坐标系上。下面给出一个例子： # 导入所需的库 import matplotlib as mpl import matplotlib.pyplot as plt import cartopy.crs as ccrs # 定义一个在PlateCarree投影中的方框 x = [-100.0, -100.0, 100.0, 100.0, -100.0] y = [-60.0, 60.0, 60.0, -60.0, -60.0] # 选取两种地图投影 map_proj = [ccrs.PlateCarree(), ccrs.Mollweide()] data_proj = ccrs.PlateCarree() # 创建画布以及ax fig = plt.figure() ax1 = fig.add_subplot(211, projection=map_proj[0]) ax1.stock_img() ax1.plot(x, y, marker='o', transform=data_proj) ax1.fill(x, y, color='coral', transform=data_proj, alpha=0.4) ax1.set_title('PlateCarree') ax2 = fig.add_subplot(212, projection=map_proj[1]) ax2.stock_img() ax2.plot(x, y, marker='o', transform=data_proj) ax2.fill(x, y, color='coral', transform=data_proj, alpha=0.4) ax2.set_title('Mollweide') plt.show() 可以看到，等距圆柱投影地图上的一个方框，在摩尔威投影的地图上会向两边“长胖”——尽管这两个形状代表同一个几何体。如果不给出 transform 关键字，那么 Cartopy 会默认数据所在的坐标系是 PlateCarree()。为了严谨起见，建议在使用任何画图方法（plot、contourf、pcolormesh 等）时都给出 transform 关键字。 显示自定义shp 使用cartopy.io.shapereader中的Reader可以读取shp文件。 from cartopy.io.shapereader import Reader reader = Reader(your_shp) 再通过cartopy.feature中的ShapelyFeature可以加载自己的shp特征，并设置相关属性。 import cartopy.crs as ccrs import cartopy.feature as cfeat proj = ccrs.PlateCarree() feature = cfeat.ShapelyFeature(reader.geometries(), proj, edgecolor='k', facecolor=cfeat.COLORS['land']) 最后通过add_feature来增加以上的地图信息. ax.add_feature(feature, linewidth=1) 为地图增加经纬度刻度 在 0.17 及以前的版本中，Cartopy 仅支持为直角坐标系统（等距圆柱投影和麦卡托投影）添加刻度，而对兰勃特投影这样的则无能为力。这里以等距圆柱投影为例 # 导入Cartopy专门提供的经纬度的Formatter from cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter import numpy as np map_proj = ccrs.PlateCarree() fig = plt.figure() ax = fig.add_subplot(111, projection=map_proj) ax.set_global() ax.stock_img() # 设置大刻度和小刻度 tick_proj = ccrs.PlateCarree() ax.set_xticks(np.arange(-180, 180 + 60, 60), crs=tick_proj) ax.set_xticks(np.arange(-180, 180 + 30, 30), minor=True, crs=tick_proj) ax.set_yticks(np.arange(-90, 90 + 30, 30), crs=tick_proj) ax.set_yticks(np.arange(-90, 90 + 15, 15), minor=True, crs=tick_proj) # 利用Formatter格式化刻度标签 ax.xaxis.set_major_formatter(LongitudeFormatter()) ax.yaxis.set_major_formatter(LatitudeFormatter()) plt.show() artopy 中需要用 GeoAxes 类的 set_xticks 和 set_yticks 方法来分别设置经纬度刻度。这两个方法还可以通过 minor 参数，指定是否添上小刻度。 set_xticks 中的 crs 关键字指的是我们给出的 ticks 是在什么坐标系统下定义的，这样好换算至 ax 所在的坐标系统，原理同上一节所述。如果不指定，就很容易出现把 ticks 画到地图外的情况。除了 set_xticks，set_extent 方法同样有 crs 关键字，我们需要多加注意。 接着利用 Cartopy 专门提供的 Formatter 来格式化刻度的标签，使之能有东经西经、南纬北纬的字母标识。 即全球地图的最右端缺失了 0° 的标识，这是 Cartopy 内部在换算 ticks 的坐标时用到了 mod 计算而导致的，解决方法见 stack overflow 上的 这个讨论，这里就不赘述了。额外提一句，NCL 对于这种情况就能正确处理。 Cartopy 还有一个很坑的地方在于，set_","date":"2021-10-22","objectID":"/cartopy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:0:0","tags":null,"title":"cartopy笔记","uri":"/cartopy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"简介 常用的地图可视化的编程工具有 MATLAB、IDL、GrADS、GMT、NCL 等。而python环境下常用的地图包有Basemap、Cartopy。此前 Python 最常用的地图包是 Basemap，然而它将于 2020 年被弃用，官方推荐使用 Cartopy 包作为替代。Cartopy 是英国气象局开发的地图绘图包，实现了 Basemap 的大部分功能，还可以通过 Matplotlib 的 API 实现丰富的自定义效果。 Cartopy 是利用 Matplotlib 来画图的，因此首先要导入 pyplot 模块。在 Cartopy 中，每种投影都是一个类，被存放在 cartopy.crs 模块中，crs 即坐标参考系统（Coordinate Reference Systems）之意。所以接着要导入这个模块。这里选取最常用的等距圆柱投影 ccrs.PlateCarree 作为地图投影。 Matplotlib 画图是通过调用 Axes 类的方法来完成的。Cartopy 创造了一个 Axes 的子类，GeoAxes，它继承了前者的基本功能，还添加了一系列绘制地图元素的方法。创建一个 GeoAxes 对象的办法是，在创建 axes（或 subplot）时，通过参数 projection 指定一个 ccrs 中的投影。 因此用 Cartopy 画地图的基本流程并不复杂： 创建画布。 通过指定 projection 参数，创建 GeoAxes 对象。 调用 GeoAxes 的方法画图。 安装Cartopy和相关的库 conda install -c conda-forge cartopy 投影方式及设置 Cartopy提供了大量的投影方式，使用cartopy.crs可以调用各个投影。 cartopy.crs.LambertCylindrical #调用兰勃脱投影 cartopy.crs.Mercator #调用麦卡托投影 GeoAxes的一些有用的方法 GeoAxes 有不少有用的方法，这里列举如下： set_global：让地图的显示范围扩展至投影的最大范围。例如，对 PlateCarree 投影的 ax 使用后，地图会变成全球的。 set_extent：给出元组 (x0, x1, y0, y1) 以限制地图的显示范围。 set_xticks：设置 x 轴的刻度。 set_yticks：设置 y 轴的刻度。 gridlines：给地图添加网格线。 coastlines：在地图上绘制海岸线。 stock_img：给地图添加低分辨率的地形图背景。 add_feature：给地图添加特征（例如陆地或海洋的填充、河流等）。 在地图上添加数据 在直接调用 ax.plot、ax.contourf 等方法在地图上添加数据之前，需要了解 Cartopy 的一个核心概念：在创建一个 GeoAxes 对象时，通过 projection 关键字指定了这个地图所处的投影坐标系，这个坐标系的投影方式和原点位置都可以被指定。但是我们手上的数据很可能并不是定义在这个坐标系下的（例如那些规整的经纬度网格数据），因此在调用画图方法往地图上添加数据时，需要通过 transform 关键字指定我们的数据所处的坐标系。画图过程中，Cartopy 会自动进行这两个坐标系之间的换算，把我们的数据正确投影到地图的坐标系上。下面给出一个例子： # 导入所需的库 import matplotlib as mpl import matplotlib.pyplot as plt import cartopy.crs as ccrs # 定义一个在PlateCarree投影中的方框 x = [-100.0, -100.0, 100.0, 100.0, -100.0] y = [-60.0, 60.0, 60.0, -60.0, -60.0] # 选取两种地图投影 map_proj = [ccrs.PlateCarree(), ccrs.Mollweide()] data_proj = ccrs.PlateCarree() # 创建画布以及ax fig = plt.figure() ax1 = fig.add_subplot(211, projection=map_proj[0]) ax1.stock_img() ax1.plot(x, y, marker='o', transform=data_proj) ax1.fill(x, y, color='coral', transform=data_proj, alpha=0.4) ax1.set_title('PlateCarree') ax2 = fig.add_subplot(212, projection=map_proj[1]) ax2.stock_img() ax2.plot(x, y, marker='o', transform=data_proj) ax2.fill(x, y, color='coral', transform=data_proj, alpha=0.4) ax2.set_title('Mollweide') plt.show() 可以看到，等距圆柱投影地图上的一个方框，在摩尔威投影的地图上会向两边“长胖”——尽管这两个形状代表同一个几何体。如果不给出 transform 关键字，那么 Cartopy 会默认数据所在的坐标系是 PlateCarree()。为了严谨起见，建议在使用任何画图方法（plot、contourf、pcolormesh 等）时都给出 transform 关键字。 显示自定义shp 使用cartopy.io.shapereader中的Reader可以读取shp文件。 from cartopy.io.shapereader import Reader reader = Reader(your_shp) 再通过cartopy.feature中的ShapelyFeature可以加载自己的shp特征，并设置相关属性。 import cartopy.crs as ccrs import cartopy.feature as cfeat proj = ccrs.PlateCarree() feature = cfeat.ShapelyFeature(reader.geometries(), proj, edgecolor='k', facecolor=cfeat.COLORS['land']) 最后通过add_feature来增加以上的地图信息. ax.add_feature(feature, linewidth=1) 为地图增加经纬度刻度 在 0.17 及以前的版本中，Cartopy 仅支持为直角坐标系统（等距圆柱投影和麦卡托投影）添加刻度，而对兰勃特投影这样的则无能为力。这里以等距圆柱投影为例 # 导入Cartopy专门提供的经纬度的Formatter from cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter import numpy as np map_proj = ccrs.PlateCarree() fig = plt.figure() ax = fig.add_subplot(111, projection=map_proj) ax.set_global() ax.stock_img() # 设置大刻度和小刻度 tick_proj = ccrs.PlateCarree() ax.set_xticks(np.arange(-180, 180 + 60, 60), crs=tick_proj) ax.set_xticks(np.arange(-180, 180 + 30, 30), minor=True, crs=tick_proj) ax.set_yticks(np.arange(-90, 90 + 30, 30), crs=tick_proj) ax.set_yticks(np.arange(-90, 90 + 15, 15), minor=True, crs=tick_proj) # 利用Formatter格式化刻度标签 ax.xaxis.set_major_formatter(LongitudeFormatter()) ax.yaxis.set_major_formatter(LatitudeFormatter()) plt.show() artopy 中需要用 GeoAxes 类的 set_xticks 和 set_yticks 方法来分别设置经纬度刻度。这两个方法还可以通过 minor 参数，指定是否添上小刻度。 set_xticks 中的 crs 关键字指的是我们给出的 ticks 是在什么坐标系统下定义的，这样好换算至 ax 所在的坐标系统，原理同上一节所述。如果不指定，就很容易出现把 ticks 画到地图外的情况。除了 set_xticks，set_extent 方法同样有 crs 关键字，我们需要多加注意。 接着利用 Cartopy 专门提供的 Formatter 来格式化刻度的标签，使之能有东经西经、南纬北纬的字母标识。 即全球地图的最右端缺失了 0° 的标识，这是 Cartopy 内部在换算 ticks 的坐标时用到了 mod 计算而导致的，解决方法见 stack overflow 上的 这个讨论，这里就不赘述了。额外提一句，NCL 对于这种情况就能正确处理。 Cartopy 还有一个很坑的地方在于，set_","date":"2021-10-22","objectID":"/python/cartopy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/:0:0","tags":null,"title":"cartopy笔记","uri":"/python/cartopy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"县以上行政区划代码 国家民政局网站发布 数据格式： ​ 按照省（自治区、直辖市、特别行政区）、地级市（地区、自治州、盟）、县（市辖区、县级市、自治县、林区、特区）三个行政级别，以两种ArcGis数据格式存储（GDB数据库格式、Shp格式） 数据信息： ​ 地理坐标系：GCS_WGS_1984 ​ 基准面：D_WGS_1984 下载地址： ​ 全国数据下载、分省数据下载、其他数据下载 ​ 行政区划数据下载链接 ​ CN-border: 中国国界省界数据 ","date":"2021-10-22","objectID":"/%E4%B8%AD%E5%9B%BD%E5%8C%BA%E5%88%92%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/:0:0","tags":null,"title":"中国区划数据下载","uri":"/%E4%B8%AD%E5%9B%BD%E5%8C%BA%E5%88%92%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/"},{"categories":null,"content":"县以上行政区划代码 国家民政局网站发布 数据格式： ​ 按照省（自治区、直辖市、特别行政区）、地级市（地区、自治州、盟）、县（市辖区、县级市、自治县、林区、特区）三个行政级别，以两种ArcGis数据格式存储（GDB数据库格式、Shp格式） 数据信息： ​ 地理坐标系：GCS_WGS_1984 ​ 基准面：D_WGS_1984 下载地址： ​ 全国数据下载、分省数据下载、其他数据下载 ​ 行政区划数据下载链接 ​ CN-border: 中国国界省界数据 ","date":"2021-10-22","objectID":"/remote/%E4%B8%AD%E5%9B%BD%E5%8C%BA%E5%88%92%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/:0:0","tags":null,"title":"中国区划数据下载","uri":"/remote/%E4%B8%AD%E5%9B%BD%E5%8C%BA%E5%88%92%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/"},{"categories":null,"content":"个人简介 一个简单的，为了梦想，努力前行的漂泊者。 中国科学院空天信息创新研究院在读博士，专业是地图学与地理信息系统，从事植被定量遥感方面的研究。主要方向是植被叶绿素荧光遥感反演、估算区域总初级生产力、环境变化响应以及胁迫等方面的研究。 个人github主页：岱 ","date":"2021-10-22","objectID":"/about/about/:0:1","tags":null,"title":"关于我","uri":"/about/about/"},{"categories":null,"content":"一、什么是机器学习(what is machine learning?) 1.1 机器学习定义 主要有两种定义： Arthur Samuel (1959). Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed. Tom Mitchell (1998) Well-posed Learning Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E. 1.2 机器学习算法 主要有两种机器学习的算法分类 监督学习 无监督学习 两者的区别为是否需要人工参与数据结果的标注。这两部分的内容占比很大，并且很重要，掌握好了可以在以后的应用中节省大把大把的时间~ 还有一些算法也属于机器学习领域，诸如： 半监督学习: 介于监督学习于无监督学习之间 推荐算法: 没错，就是那些个买完某商品后还推荐同款的某购物网站所用的算法。 强化学习: 通过观察来学习如何做出动作，每个动作都会对环境有所影响，而环境的反馈又可以引导该学习算法。 迁移学习 1.3 监督学习(Supervised Learning) 监督学习，即为教计算机如何去完成预测任务（有反馈），预先给一定数据量的输入和对应的结果即训练集，建模拟合，最后让计算机预测未知数据的结果。 监督学习一般有两种： (1) 回归问题 (Regression) ​ 回归问题即为预测一系列的连续值。 ​ 在房屋价格预测的例子中，给出了一系列的房屋面基数据，根据这些数据来预测任意面积的房屋价格。给出照片-年龄数据集，预测给定照片的年龄。 (2) 分类问题 (Classification) ​ 分类问题即为预测一系列的离散值。 ​ 即根据数据预测被预测对象属于哪个分类。 ​ 视频中举了癌症肿瘤这个例子，针对诊断结果，分别分类为良性或恶性。还例如垃圾邮件分类问题，也同样属于监督学习中的分类问题。 视频中提到支持向量机这个算法，旨在解决当特征量很大的时候(特征即如癌症例子中的肿块大小，颜色，气味等各种特征)，计算机内存一定会不够用的情况。支持向量机能让计算机处理无限多个特征。 1.4 无监督学习(Unsupervised Learning) 相对于监督学习，训练集不会有人为标注的结果（无反馈），我们不会给出结果或无法得知训练集的结果是什么样，而是单纯由计算机通过无监督学习算法自行分析，从而“得出结果”。计算机可能会把特定的数据集归为几个不同的簇，故叫做聚类算法。 无监督学习一般分为两种： (1) 聚类 (Clustering) 新闻聚合 DNA 个体聚类 天文数据分析 市场细分 社交网络分析 (2) 非聚类 (Non-clustering) 鸡尾酒问题 新闻聚合 在例如谷歌新闻这样的网站中，每天后台都会收集成千上万的新闻，然后将这些新闻分组成一个个的新闻专题，这样一个又一个聚类，就是应用了无监督学习的结果。 鸡尾酒问题 二、单变量线性回归 (Linear Regression with One Variable) 2.1 模型表示 (Model Representation) (1) 房价预测训练集 Size in () Price ($) in 1000’s() 2104 460 1416 232 1534 315 852 178 房价预测训练集中，同时给出了输入 和输出结果 ，即给出了人为标注的**”正确结果“**，且预测的量是连续的，属于监督学习中的回归问题。 (2) 问题解决模型 其中$h$代表结果函数，也称为假设(hypothesis) 。假设函数根据输入(房屋的面积)，给出预测结果输出(房屋的价格)，即是一个$X—\u003eY$的映射。 $h_\\theta(x) = \\theta_0 + \\theta_1x$，为解决房价问题的一种可行表达式。 $x$: 特征/输入变量 上式中，$\\theta$为参数，$\\theta$的变化才决定了输出结果，不同以往，这里的$x$被我们视作已知(不论是数据集还是预测时的输入)，所以怎样解得$\\theta$以更好地拟合数据，成了求解该问题的最终问题。 单变量，即只有一个特征(如例子中房屋的面积这个特征)。 2.2 代价函数 (Cost Function) 李航《统计学习方法》一书中，损失函数与代价函数两者为同一概念，未作细分区别，全书没有和《深度学习》一书一样混用，而是统一使用损失函数来指代这类类似概念。 吴恩达(Andrew Ng)老师在其公开课中对两者做了细分。如果要听他的课做作业，不细分这两个概念是会被打小手扣分的！这也可能是因为老师发现了业内混用的乱象，想要治一治吧。 损失函数(Loss/Error Function): 计算单个样本的误差。link 代价函数(Cost Function): 计算整个训练集所有损失函数之和的平均值 综合考虑，本笔记对两者概念进行细分，若有所谬误，欢迎指正。 我们的目的在于求解预测结果$\\theta$最接近于实际结果$y$时$\\theta$的取值，则问题可表达为求解$\\sum_{i=0}^{m}{(h_\\theta(x^{(i)}) - y^{i})}$的**最小值**。 $m$: 训练集中的样本总数 $y$: 目标变量/输出变量 $(x, y)$: 训练集中的实例 $(x^{i}, y{i})$: 训练集中的第$i$个样本实例 上图展示了当$\\theta$取不同值时，$h_\\theta(x)$对数据集的拟合情况，蓝色虚线部分代表**建模误差**（预测结果与实际结果之间的误差），我们的目标就是最小化所有误差之和。 为了求解最小值，引入代价函数(Cost Function)概念，用于度量建模误差。考虑到要计算最小值，应用二次函数对求和式建模，即应用统计学中的平方损失函数（最小二乘法）： $J(\\theta_0, \\theta_1) = \\frac{1}{2m} \\sum_{i=1}^{m}(\\hat{y_i} - {y_i})^2 = \\frac{1}{2m} \\sum_{i=1}^{m}(h_\\theta(x_i) - {y_i})^2$ $\\hat{y_i}$: $y$的预测值 系数$\\frac{1}{2}$存在与否都不会影响结果，这里是为了在应用梯度下降时便于求解，平方的导数会抵消掉$\\frac{1}{2}$ 讨论到这里，我们的问题就转化成了求解$J(\\theta_0, \\theta_1)$的最小值。 2.3 代价函数 - 直观理解1 (Cost Function - Intuition I) 根据上节视频，列出如下定义： 假设函数(Hypothesis): $h_\\theta(x) = \\theta_0 + \\theta_1x$ 参数(Parameters): $\\theta_0, \\theta_1$ 代价函数(Cost Function): $J(\\theta_0, \\theta_1) = \\frac{1}{2m} \\sum \\limits_{i=1}^{m}(h_\\theta(x_i) - {y_i})^2$ 目标(Goal): ${\\underset{\\theta_0, \\theta_1}{minimize} J(\\theta_0, \\theta_1)}$ 为了直观理解代价函数到底是在做什么，先假设$\\theta_1 = 0$，并假设训练集有三个数据，分别为$(1, 1), (2, 2), (3, 3)$，这样在平面坐标系中绘制出$h_\\theta(x)$，并分析$J(\\theta_0, \\theta_1)$的变化。 由图$J(\\theta_0, \\theta_1)$随着$\\theta_1$的变化而变化，可见**当$\\theta_1 = 1$**时，$J(\\theta_0, \\theta_1)=0$，取得最小值，对应于左图青色直线，即函数$h$拟合最好的情况。 ","date":"2021-10-22","objectID":"/machine/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B8%80/:0:0","tags":null,"title":"机器学习公开课笔记一","uri":"/machine/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B8%80/"},{"categories":null,"content":"一、什么是机器学习(what is machine learning?) 1.1 机器学习定义 主要有两种定义： Arthur Samuel (1959). Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed. Tom Mitchell (1998) Well-posed Learning Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E. 1.2 机器学习算法 主要有两种机器学习的算法分类 监督学习 无监督学习 两者的区别为是否需要人工参与数据结果的标注。这两部分的内容占比很大，并且很重要，掌握好了可以在以后的应用中节省大把大把的时间~ 还有一些算法也属于机器学习领域，诸如： 半监督学习: 介于监督学习于无监督学习之间 推荐算法: 没错，就是那些个买完某商品后还推荐同款的某购物网站所用的算法。 强化学习: 通过观察来学习如何做出动作，每个动作都会对环境有所影响，而环境的反馈又可以引导该学习算法。 迁移学习 1.3 监督学习(Supervised Learning) 监督学习，即为教计算机如何去完成预测任务（有反馈），预先给一定数据量的输入和对应的结果即训练集，建模拟合，最后让计算机预测未知数据的结果。 监督学习一般有两种： (1) 回归问题 (Regression) ​ 回归问题即为预测一系列的连续值。 ​ 在房屋价格预测的例子中，给出了一系列的房屋面基数据，根据这些数据来预测任意面积的房屋价格。给出照片-年龄数据集，预测给定照片的年龄。 (2) 分类问题 (Classification) ​ 分类问题即为预测一系列的离散值。 ​ 即根据数据预测被预测对象属于哪个分类。 ​ 视频中举了癌症肿瘤这个例子，针对诊断结果，分别分类为良性或恶性。还例如垃圾邮件分类问题，也同样属于监督学习中的分类问题。 视频中提到支持向量机这个算法，旨在解决当特征量很大的时候(特征即如癌症例子中的肿块大小，颜色，气味等各种特征)，计算机内存一定会不够用的情况。支持向量机能让计算机处理无限多个特征。 1.4 无监督学习(Unsupervised Learning) 相对于监督学习，训练集不会有人为标注的结果（无反馈），我们不会给出结果或无法得知训练集的结果是什么样，而是单纯由计算机通过无监督学习算法自行分析，从而“得出结果”。计算机可能会把特定的数据集归为几个不同的簇，故叫做聚类算法。 无监督学习一般分为两种： (1) 聚类 (Clustering) 新闻聚合 DNA 个体聚类 天文数据分析 市场细分 社交网络分析 (2) 非聚类 (Non-clustering) 鸡尾酒问题 新闻聚合 在例如谷歌新闻这样的网站中，每天后台都会收集成千上万的新闻，然后将这些新闻分组成一个个的新闻专题，这样一个又一个聚类，就是应用了无监督学习的结果。 鸡尾酒问题 二、单变量线性回归 (Linear Regression with One Variable) 2.1 模型表示 (Model Representation) (1) 房价预测训练集 Size in () Price ($) in 1000’s() 2104 460 1416 232 1534 315 852 178 房价预测训练集中，同时给出了输入 和输出结果 ，即给出了人为标注的**”正确结果“**，且预测的量是连续的，属于监督学习中的回归问题。 (2) 问题解决模型 其中$h$代表结果函数，也称为假设(hypothesis) 。假设函数根据输入(房屋的面积)，给出预测结果输出(房屋的价格)，即是一个$X—\u003eY$的映射。 $h_\\theta(x) = \\theta_0 + \\theta_1x$，为解决房价问题的一种可行表达式。 $x$: 特征/输入变量 上式中，$\\theta$为参数，$\\theta$的变化才决定了输出结果，不同以往，这里的$x$被我们视作已知(不论是数据集还是预测时的输入)，所以怎样解得$\\theta$以更好地拟合数据，成了求解该问题的最终问题。 单变量，即只有一个特征(如例子中房屋的面积这个特征)。 2.2 代价函数 (Cost Function) 李航《统计学习方法》一书中，损失函数与代价函数两者为同一概念，未作细分区别，全书没有和《深度学习》一书一样混用，而是统一使用损失函数来指代这类类似概念。 吴恩达(Andrew Ng)老师在其公开课中对两者做了细分。如果要听他的课做作业，不细分这两个概念是会被打小手扣分的！这也可能是因为老师发现了业内混用的乱象，想要治一治吧。 损失函数(Loss/Error Function): 计算单个样本的误差。link 代价函数(Cost Function): 计算整个训练集所有损失函数之和的平均值 综合考虑，本笔记对两者概念进行细分，若有所谬误，欢迎指正。 我们的目的在于求解预测结果$\\theta$最接近于实际结果$y$时$\\theta$的取值，则问题可表达为求解$\\sum_{i=0}^{m}{(h_\\theta(x^{(i)}) - y^{i})}$的**最小值**。 $m$: 训练集中的样本总数 $y$: 目标变量/输出变量 $(x, y)$: 训练集中的实例 $(x^{i}, y{i})$: 训练集中的第$i$个样本实例 上图展示了当$\\theta$取不同值时，$h_\\theta(x)$对数据集的拟合情况，蓝色虚线部分代表**建模误差**（预测结果与实际结果之间的误差），我们的目标就是最小化所有误差之和。 为了求解最小值，引入代价函数(Cost Function)概念，用于度量建模误差。考虑到要计算最小值，应用二次函数对求和式建模，即应用统计学中的平方损失函数（最小二乘法）： $J(\\theta_0, \\theta_1) = \\frac{1}{2m} \\sum_{i=1}^{m}(\\hat{y_i} - {y_i})^2 = \\frac{1}{2m} \\sum_{i=1}^{m}(h_\\theta(x_i) - {y_i})^2$ $\\hat{y_i}$: $y$的预测值 系数$\\frac{1}{2}$存在与否都不会影响结果，这里是为了在应用梯度下降时便于求解，平方的导数会抵消掉$\\frac{1}{2}$ 讨论到这里，我们的问题就转化成了求解$J(\\theta_0, \\theta_1)$的最小值。 2.3 代价函数 - 直观理解1 (Cost Function - Intuition I) 根据上节视频，列出如下定义： 假设函数(Hypothesis): $h_\\theta(x) = \\theta_0 + \\theta_1x$ 参数(Parameters): $\\theta_0, \\theta_1$ 代价函数(Cost Function): $J(\\theta_0, \\theta_1) = \\frac{1}{2m} \\sum \\limits_{i=1}^{m}(h_\\theta(x_i) - {y_i})^2$ 目标(Goal): ${\\underset{\\theta_0, \\theta_1}{minimize} J(\\theta_0, \\theta_1)}$ 为了直观理解代价函数到底是在做什么，先假设$\\theta_1 = 0$，并假设训练集有三个数据，分别为$(1, 1), (2, 2), (3, 3)$，这样在平面坐标系中绘制出$h_\\theta(x)$，并分析$J(\\theta_0, \\theta_1)$的变化。 由图$J(\\theta_0, \\theta_1)$随着$\\theta_1$的变化而变化，可见**当$\\theta_1 = 1$**时，$J(\\theta_0, \\theta_1)=0$，取得最小值，对应于左图青色直线，即函数$h$拟合最好的情况。 ","date":"2021-10-22","objectID":"/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B8%80/:0:0","tags":null,"title":"机器学习公开课笔记一","uri":"/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0%E4%B8%80/"},{"categories":null,"content":"何处这一生 画了一幅画， 画中，有你看不见的温柔的风 也有你一眼望见的身影， 那刻，很美 北疆的温度，随着夜晚的灯，变得体贴又柔软 遂，写了一段情 情中，有你藏不住的心底的羞 也有你细致入微的柔情 那时，很美 北疆的温度，随着夜空的星，变得明亮而温暖 一切简单而又平凡 ","date":"2018-11-28","objectID":"/drift/%E4%BD%95%E5%A4%84%E8%BF%99%E4%B8%80%E7%94%9F/:0:0","tags":null,"title":"何处这一生","uri":"/drift/%E4%BD%95%E5%A4%84%E8%BF%99%E4%B8%80%E7%94%9F/"},{"categories":null,"content":"何处这一生 画了一幅画， 画中，有你看不见的温柔的风 也有你一眼望见的身影， 那刻，很美 北疆的温度，随着夜晚的灯，变得体贴又柔软 遂，写了一段情 情中，有你藏不住的心底的羞 也有你细致入微的柔情 那时，很美 北疆的温度，随着夜空的星，变得明亮而温暖 一切简单而又平凡 ","date":"2018-11-28","objectID":"/%E4%BD%95%E5%A4%84%E8%BF%99%E4%B8%80%E7%94%9F/:0:0","tags":null,"title":"何处这一生","uri":"/%E4%BD%95%E5%A4%84%E8%BF%99%E4%B8%80%E7%94%9F/"},{"categories":null,"content":"很想告诉你 很想告诉你 现在的每一天 都很有意义 无论是刮风还是下雨 浓烈心中的情意 很想告诉你 现在的每一刻 都像是瘟疫 想你入迷却之不及 摇曳心中的思绪 很想告诉你 未来的每一刻 都像是蜂蜜 甜蜜心中的记忆 ","date":"2018-05-17","objectID":"/drift/%E5%BE%88%E6%83%B3%E5%91%8A%E8%AF%89%E4%BD%A0/:0:0","tags":null,"title":"很想告诉你","uri":"/drift/%E5%BE%88%E6%83%B3%E5%91%8A%E8%AF%89%E4%BD%A0/"},{"categories":null,"content":"很想告诉你 很想告诉你 现在的每一天 都很有意义 无论是刮风还是下雨 浓烈心中的情意 很想告诉你 现在的每一刻 都像是瘟疫 想你入迷却之不及 摇曳心中的思绪 很想告诉你 未来的每一刻 都像是蜂蜜 甜蜜心中的记忆 ","date":"2018-05-17","objectID":"/%E5%BE%88%E6%83%B3%E5%91%8A%E8%AF%89%E4%BD%A0/:0:0","tags":null,"title":"很想告诉你","uri":"/%E5%BE%88%E6%83%B3%E5%91%8A%E8%AF%89%E4%BD%A0/"},{"categories":null,"content":"牵着你的手 春风细细， 诉说秘密， 谁在偷偷想你 谁又淹没在这寂寥的夜 无聊在这空荡的图书馆里 时间，时间 is too long for me 春雨很温柔 轻轻落在油纸伞上 此时正好契合了我的心意 而我的怯意 也恰好能隐藏在这漆黑的夜里 春风很随意 绿叶摇曳着花的手臂 此刻吞咽了太多的话语 怕伤了风情坏了心意 太多的日子过去 斑驳、无聊而没有意义 现在眼前的你 写满了我心中未曾有的诗情画意 让我，让我牵着你的手 感受你指尖的温度 让我，让我牵着你的手 走过轮回的四季 ","date":"2018-05-04","objectID":"/drift/%E6%98%A5%E9%A3%8E%E7%BB%86%E7%BB%86/:0:0","tags":null,"title":"牵着你的手","uri":"/drift/%E6%98%A5%E9%A3%8E%E7%BB%86%E7%BB%86/"},{"categories":null,"content":"牵着你的手 春风细细， 诉说秘密， 谁在偷偷想你 谁又淹没在这寂寥的夜 无聊在这空荡的图书馆里 时间，时间 is too long for me 春雨很温柔 轻轻落在油纸伞上 此时正好契合了我的心意 而我的怯意 也恰好能隐藏在这漆黑的夜里 春风很随意 绿叶摇曳着花的手臂 此刻吞咽了太多的话语 怕伤了风情坏了心意 太多的日子过去 斑驳、无聊而没有意义 现在眼前的你 写满了我心中未曾有的诗情画意 让我，让我牵着你的手 感受你指尖的温度 让我，让我牵着你的手 走过轮回的四季 ","date":"2018-05-04","objectID":"/%E6%98%A5%E9%A3%8E%E7%BB%86%E7%BB%86/:0:0","tags":null,"title":"牵着你的手","uri":"/%E6%98%A5%E9%A3%8E%E7%BB%86%E7%BB%86/"},{"categories":null,"content":"你的银杏叶黄了，黄了一地 一年，秋天，银杏落 落，落满地 不知那时的你，在哪里 也许，就在这里 扇形叶，叉状脉 画在阳光灿烂的街头 写在黄叶铺满的小路 再蘸点墨水 绘上湛蓝的天空 你说，快给我拍照 怕，秋天不回来 怕，自己会离开 所以，你偷偷地牵走了秋天 一夜，星辰 一阵，秋风 那天的银杏叶，飘散 散在风里 散在雨里 却深深地，留在了你的心里 ​ 你俯身，拾起一片， 牢牢的捂在手里 真的，它会从眼前失去 最终，你的固执，紧锁了秋意 连同那时的自己 一年，秋天，银杏落 落，落心里 不知此刻的你，在哪里 只是，不在这里 扇形叶，叉状脉 滴上真切难忘的泪水 刻上岁月斑驳的诗句 于是放下笔 已然写不出秋意 春夏的日子里，谁陪着你 酿成了美酒，写成了诗句； 冬天大雪纷飞里，风寒你能否抵御 还是最终埋葬了过去 某一天，你会想起 那时的叶落满地 那时的浓浓秋意 某一天，你会不会想起 那时的孤独侵袭 那时的刻苦努力 不知，拙笔弄文 配不配得上你的银杏，和黄了的记忆 ","date":"2017-11-02","objectID":"/drift/%E4%BD%A0%E7%9A%84%E9%93%B6%E6%9D%8F%E5%8F%B6/:0:0","tags":null,"title":"你的银杏叶","uri":"/drift/%E4%BD%A0%E7%9A%84%E9%93%B6%E6%9D%8F%E5%8F%B6/"},{"categories":null,"content":"你的银杏叶黄了，黄了一地 一年，秋天，银杏落 落，落满地 不知那时的你，在哪里 也许，就在这里 扇形叶，叉状脉 画在阳光灿烂的街头 写在黄叶铺满的小路 再蘸点墨水 绘上湛蓝的天空 你说，快给我拍照 怕，秋天不回来 怕，自己会离开 所以，你偷偷地牵走了秋天 一夜，星辰 一阵，秋风 那天的银杏叶，飘散 散在风里 散在雨里 却深深地，留在了你的心里 ​ 你俯身，拾起一片， 牢牢的捂在手里 真的，它会从眼前失去 最终，你的固执，紧锁了秋意 连同那时的自己 一年，秋天，银杏落 落，落心里 不知此刻的你，在哪里 只是，不在这里 扇形叶，叉状脉 滴上真切难忘的泪水 刻上岁月斑驳的诗句 于是放下笔 已然写不出秋意 春夏的日子里，谁陪着你 酿成了美酒，写成了诗句； 冬天大雪纷飞里，风寒你能否抵御 还是最终埋葬了过去 某一天，你会想起 那时的叶落满地 那时的浓浓秋意 某一天，你会不会想起 那时的孤独侵袭 那时的刻苦努力 不知，拙笔弄文 配不配得上你的银杏，和黄了的记忆 ","date":"2017-11-02","objectID":"/%E4%BD%A0%E7%9A%84%E9%93%B6%E6%9D%8F%E5%8F%B6/:0:0","tags":null,"title":"你的银杏叶","uri":"/%E4%BD%A0%E7%9A%84%E9%93%B6%E6%9D%8F%E5%8F%B6/"}]